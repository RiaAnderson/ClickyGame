{"version":3,"sources":["images/Alexis.jpg","images/David.jpg","images/Jocelyn.jpg","images/Johnny.jpg","images/Moira.jpg","images/Mutt.jpg","images/Patrick.jpg","images/Roland.jpg","images/Ronnie.jpg","images/Stevie.jpg","images/Ted.jpg","images/Twyla.jpeg","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Wrapper","App","state","clickedActors","score","topScore","roundEnd","actors","images","require","id","onClick","shuffledArray","shuffleArray","setState","includes","message","shuffle","concat","topscore","actorsArray","i","length","j","Math","floor","random","console","log","this","className","map","actor","key","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca19cfdc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Alexis.f7b18f0f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/David.323033c2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Jocelyn.84d30c14.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Johnny.ebe20b22.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Moira.9db3af57.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Mutt.62de513e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Patrick.af5c0d47.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Roland.8484eb05.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Ronnie.07ef9331.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Stevie.be8f223e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Ted.8e421aca.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Twyla.1231b6e7.jpeg\";","import React from \"react\";\nimport \"./Wrapper.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React, {Component} from 'react';\nimport './styles.css';\nimport ActorCard from \"./components/ActorCard/ActorCard.js\";\nimport Wrapper from \"./components/Wrapper/Wrapper.js\";\n\n\nclass App extends Component {\n  state={\n    clickedActors: [],\n    score: 0,\n    topScore:0,\n    roundEnd: false,\n    actors: [\n      {\n        images: require (\"./images/Alexis.jpg\"),\n        id: 1\n      },\n      {\n        images: require (\"./images/David.jpg\"),\n        id: 2\n      },\n      {\n        images: require (\"./images/Jocelyn.jpg\"),\n        id: 3\n      },\n      {\n        images: require (\"./images/Johnny.jpg\"),\n        id: 4\n      },\n      {\n        images: require (\"./images/Moira.jpg\"),\n        id: 5\n      },\n      {\n        images: require (\"./images/Mutt.jpg\"),\n        id: 6\n      },\n      {\n        images: require (\"./images/Patrick.jpg\"),\n        id: 7\n      },\n      {\n        images: require (\"./images/Roland.jpg\"),\n        id: 8\n      },\n      {\n        images: require (\"./images/Ronnie.jpg\"),\n        id: 9\n      },\n      {\n        images: require (\"./images/Stevie.jpg\"),\n        id: 10\n      },\n      {\n        images: require (\"./images/Ted.jpg\"),\n        id: 11\n      },\n      {\n        images: require (\"./images/Twyla.jpeg\"),\n        id: 12\n      }\n    ]\n  };\n\n  onClick = (id) =>{\n    let {actors} = this.state;\n  \n    const shuffledArray = this.shuffleArray(actors);\n    this.setState({actors: shuffledArray});\n    if (this.state.clickedActors.includes(id)) {\n      this.setState({ score: 0, clickedActors: [], message: \"Wrong! Game Over. Click an image to start again!\", shuffle:\"true\"});\n    } else {\n      this.setState({\n        clickedActors: this.state.clickedActors.concat([id]),\n        score: this.state.score +1,\n        topscore: this.state.score +1,\n        message: \"You Guessed Correctly!\",\n        shuffle: \"false\"\n      });\n    }\n    if (this.state.score > this.state.topScore) {\n      this.setState({ topScore: this.state.score });\n    }\n    if(this.state.score  == 11) {\n      this.setState({message: \"You Won! Great Job! Click to play again!\"});\n      return;\n    }\n  }\n    shuffleArray = (actorsArray) => {\n      for (let i = actorsArray.length -1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [actorsArray[i], actorsArray[j]] = [actorsArray[j], actorsArray[i]];\n      }\n      return actorsArray;\n  }\n  \n  render() {\n    console.log(this.state)\n    return (\n      <div className=\"App\">\n        <h1>Schitt's Creek Memory Game</h1>\n        <p><strong>Click all the cast members to score points, but don't click on a cast member more than once.</strong></p>\n        <p className = \"score\"><strong>Current Score: {this.state.score} | HighScore: {this.state.topScore}</strong></p>\n            <p className = \"message\"><strong>{this.state.message}</strong></p>\n        \n        <div className=\"cast\">\n        {this.state.actors.map(actor => <img onClick= {() =>this.onClick(actor.id)} key={actor.id} src={actor.images} alt=\"cast member\" />)}\n        </div>\n      \n     \n      <footer className = \"footer\">\n        <div className = \"container\">\n          <p>Â© Ria Anderson 2020</p>\n        </div>\n      </footer>\n      \n      \n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}